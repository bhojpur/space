package geometry

// Copyright (c) 2018 Bhojpur Consulting Private Limited, India. All rights reserved.

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import (
	"fmt"
	"strings"
	"testing"
)

func TestSegmentContainsPoint(t *testing.T) {
	expect(t, S(0, 0, 1, 1).ContainsPoint(P(0, 0)))
	expect(t, S(0, 0, 1, 1).ContainsPoint(P(0.5, 0.5)))
	expect(t, S(0, 0, 1, 1).ContainsPoint(P(1, 1)))
	expect(t, !S(0, 0, 1, 1).ContainsPoint(P(1.1, 1.1)))
	expect(t, !S(0, 0, 1, 1).ContainsPoint(P(0.5, 0.6)))
	expect(t, !S(0, 0, 1, 1).ContainsPoint(P(-0.1, -0.1)))
}

func TestSegmentCollinearPoint(t *testing.T) {
	expect(t, S(0, 0, 1, 1).CollinearPoint(P(-1, -1)))
	expect(t, S(0, 0, 1, 1).CollinearPoint(P(0.5, 0.5)))
	expect(t, S(0, 0, 1, 1).CollinearPoint(P(2, 2)))
	expect(t, S(1, 1, 0, 0).CollinearPoint(P(-1, -1)))
	expect(t, S(1, 1, 0, 0).CollinearPoint(P(0.5, 0.5)))
	expect(t, S(1, 1, 0, 0).CollinearPoint(P(2, 2)))
	expect(t, S(1, 0, 0, 1).CollinearPoint(P(2, -1)))
	expect(t, S(1, 0, 0, 1).CollinearPoint(P(0.5, 0.5)))
	expect(t, S(1, 0, 0, 1).CollinearPoint(P(-1, 2)))
	expect(t, S(0, 1, 1, 0).CollinearPoint(P(2, -1)))
	expect(t, S(0, 1, 1, 0).CollinearPoint(P(0.5, 0.5)))
	expect(t, S(0, 1, 1, 0).CollinearPoint(P(-1, 2)))
}

func TestSegmentContainsSegment(t *testing.T) {
	expect(t, S(0, 0, 10, 10).ContainsSegment(S(0, 0, 10, 10)))
	expect(t, S(0, 0, 10, 10).ContainsSegment(S(2, 2, 10, 10)))
	expect(t, S(0, 0, 10, 10).ContainsSegment(S(2, 2, 8, 8)))
	expect(t, !S(0, 0, 10, 10).ContainsSegment(S(-1, -1, 8, 8)))
}

func TestSegmentIntersectsSegment(t *testing.T) {
	vals := []interface{}{
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `----A----`, 1,
		`----A----`, `----A----`, 1, `----A----`, `----*----`, 1,
		`----*----`, `----*----`, 1, `----*----`, `----B----`, 1,
		`----B----`, `----B----`, 1, `----B----`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `----A----`, 0,
		`---------`, `----A----`, 1, `---------`, `----*----`, 0,
		`---------`, `----*----`, 1, `---------`, `----B----`, 0,
		`----A----`, `----B----`, 1, `----A----`, `---------`, 0,
		`----*----`, `---------`, 1, `----*----`, `---------`, 0,
		`----B----`, `---------`, 1, `----B----`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`----A----`, `---------`, 1, `----A----`, `---------`, 1,
		`----*----`, `----A----`, 1, `----*----`, `---------`, 1,
		`----B----`, `----*----`, 1, `----B----`, `----A----`, 1,
		`---------`, `----B----`, 1, `---------`, `----*----`, 1,
		`---------`, `---------`, 1, `---------`, `----B----`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`----A----`, `---------`, 1, `----A----`, `---------`, 0,
		`----*----`, `---------`, 1, `----*----`, `---------`, 0,
		`----B----`, `----A----`, 1, `----B----`, `---------`, 0,
		`---------`, `----*----`, 1, `---------`, `----A----`, 0,
		`---------`, `----B----`, 1, `---------`, `----*----`, 0,
		`---------`, `---------`, 1, `---------`, `----B----`, 0,

		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`----A----`, `-----A---`, 0, `----A----`, `---A-----`, 0,
		`----*----`, `-----*---`, 0, `----*----`, `---*-----`, 0,
		`----B----`, `-----B---`, 0, `----B----`, `---B-----`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---A*B---`, `---A*B---`, 1, `---A*B---`, `----A*B--`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---A*B---`, `-----A*B-`, 1, `---A*B---`, `------A*B`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---A*B---`, `--A*B----`, 1, `---A*B---`, `-A*B-----`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---A*B---`, `--A*B----`, 1, `---A*B---`, `A*B------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,

		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---A*B---`, 0, `---------`, `---------`, 0,
		`---A*B---`, `---------`, 0, `---A*B---`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---A*B---`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `------A--`, 1,
		`-----A---`, `-----A---`, 1, `-----A---`, `-----*---`, 1,
		`----*----`, `----*----`, 1, `----*----`, `----B----`, 1,
		`---B-----`, `---B-----`, 1, `---B-----`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `--------A`, 0,
		`---------`, `-------A-`, 1, `---------`, `-------*-`, 0,
		`---------`, `------*--`, 1, `---------`, `------B--`, 0,
		`-----A---`, `-----B---`, 1, `-----A---`, `---------`, 0,
		`----*----`, `---------`, 1, `----*----`, `---------`, 0,
		`---B-----`, `---------`, 1, `---B-----`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`-----A---`, `---------`, 1, `-----A---`, `---------`, 1,
		`----*----`, `----A----`, 1, `----*----`, `---------`, 1,
		`---B-----`, `---*-----`, 1, `---B-----`, `---A-----`, 1,
		`---------`, `--B------`, 1, `---------`, `--*------`, 1,
		`---------`, `---------`, 1, `---------`, `-B-------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`-----A---`, `---------`, 0, `-----A---`, `------A--`, 0,
		`----*----`, `---------`, 0, `----*----`, `-----*---`, 0,
		`---B-----`, `---------`, 0, `---B-----`, `----B----`, 0,
		`---------`, `--A------`, 0, `---------`, `---------`, 0,
		`---------`, `-*-------`, 0, `---------`, `---------`, 0,
		`---------`, `B--------`, 0, `---------`, `---------`, 0,

		`---------`, `---------`, 0, `---------`, `---------`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,
		`-----A---`, `----A----`, 0, `---A-----`, `---A-----`, 1,
		`----*----`, `---*-----`, 0, `----*----`, `----*----`, 1,
		`---B-----`, `--B------`, 0, `-----B---`, `-----B---`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `-A-------`, 1,
		`---------`, `--A------`, 1, `---------`, `--*------`, 1,
		`---A-----`, `---*-----`, 1, `---A-----`, `---B-----`, 1,
		`----*----`, `----B----`, 1, `----*----`, `---------`, 1,
		`-----B---`, `---------`, 1, `-----B---`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `A--------`, 0, `---------`, `---------`, 1,
		`---------`, `-*-------`, 0, `---------`, `---------`, 1,
		`---------`, `--B------`, 0, `---------`, `---------`, 1,
		`---A-----`, `---------`, 0, `---A-----`, `---------`, 1,
		`----*----`, `---------`, 0, `----*----`, `----A----`, 1,
		`-----B---`, `---------`, 0, `-----B---`, `-----*---`, 1,
		`---------`, `---------`, 0, `---------`, `------B--`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,
		`---------`, `---------`, 0, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---A-----`, `---------`, 1, `---A-----`, `---------`, 0,
		`----*----`, `---------`, 1, `----*----`, `---------`, 0,
		`-----B---`, `-----A---`, 1, `-----B---`, `---------`, 0,
		`---------`, `------*--`, 1, `---------`, `------A--`, 0,
		`---------`, `-------B-`, 1, `---------`, `-------*-`, 0,
		`---------`, `---------`, 1, `---------`, `--------B`, 0,

		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---A-----`, `----A----`, 0, `---A-----`, `--A------`, 0,
		`----*----`, `-----*---`, 0, `----*----`, `---*-----`, 0,
		`-----B---`, `------B--`, 0, `-----B---`, `----B----`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---A-----`, `-----A---`, 1, `---A-----`, `------A--`, 1,
		`----*----`, `----*----`, 1, `----*----`, `-----*---`, 1,
		`-----B---`, `---B-----`, 1, `-----B---`, `----B----`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---A-----`, `-------A-`, 1, `---A-----`, `--------A`, 0,
		`----*----`, `------*--`, 1, `----*----`, `-------*-`, 0,
		`-----B---`, `-----B---`, 1, `-----B---`, `------B--`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---A-----`, `-----A---`, 1, `---A-----`, `----A----`, 1,
		`----*----`, `----*----`, 1, `----*----`, `---*-----`, 1,
		`-----B---`, `---B-----`, 1, `-----B---`, `--B------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---A-----`, `---A-----`, 1, `---A-----`, `--A------`, 0,
		`----*----`, `--*------`, 1, `----*----`, `-*-------`, 0,
		`-----B---`, `-B-------`, 1, `-----B---`, `B--------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,
		`---------`, `---------`, 1, `---------`, `---------`, 0,

		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `-----A---`, 1,
		`---------`, `-----A---`, 1, `---------`, `----*----`, 1,
		`---A-----`, `----*----`, 1, `---A-----`, `---B-----`, 1,
		`----*----`, `---B-----`, 1, `----*----`, `---------`, 1,
		`-----B---`, `---------`, 1, `-----B---`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,
		`---------`, `---------`, 1, `---------`, `---------`, 1,

		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `-------A-`, 0, `---------`, `---------`, 0,
		`---A-----`, `------*--`, 0, `---A-----`, `---------`, 0,
		`----*----`, `-----B---`, 0, `----*----`, `---A-----`, 0,
		`-----B---`, `---------`, 0, `-----B---`, `--*------`, 0,
		`---------`, `---------`, 0, `---------`, `-B-------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
		`---------`, `---------`, 0, `---------`, `---------`, 0,
	}

	flip := func(seg Segment) Segment {
		return Segment{A: seg.B, B: seg.A}
	}

	var ms string
	var ncol = 3
	for i, k := 0, 0; i < len(vals); k++ {
		var grids [2][9]string
		for j := 0; j < 9; j++ {
			grids[0][j] = vals[i+ncol*2*j].(string)
		}
		for j := 0; j < 9; j++ {
			grids[1][j] = vals[i+1+ncol*2*j].(string)
		}
		//label := "?" //vals[i+2].(string)
		expect := vals[i+2].(int) != 0

		var segs [2]Segment
		for j := 0; j < 2; j++ {
			for y := 0; y < 9; y++ {
				for x := 0; x < 9; x++ {
					ch := grids[j][8-y][x]
					if ch == 'A' {
						segs[j].A.X = float64(x)
						segs[j].A.Y = float64(y)
					} else if ch == 'B' {
						segs[j].B.X = float64(x)
						segs[j].B.Y = float64(y)
					}
				}
			}
		}

		tests := [][2]Segment{
			{segs[0], segs[1]},
			{flip(segs[0]), segs[1]},
			{segs[0], flip(segs[1])},
			{flip(segs[0]), flip(segs[1])},
		}
		for j := 0; j < len(tests); j++ {
			if tests[j][0].IntersectsSegment(tests[j][1]) != expect {
				ms += fmt.Sprintf("MISMATCH SEGMENTS: %v (TEST %d)\n", segs, j)
				ms += fmt.Sprintf("EXPECTED: %t, GOT: %t\n", expect, !expect)
				ms += fmt.Sprintf("GRID 1\n%s\n", strings.Join(grids[0][:], "\n"))
				ms += fmt.Sprintf("GRID 2\n%s\n", strings.Join(grids[1][:], "\n"))
			}
		}
		// move to next block
		if k%2 == 1 {
			i += ncol*2*9 - ncol
		} else {
			i += ncol
		}
	}

	if ms != "" {
		t.Fatalf("\n%s", ms)
	}
}

func TestSegmentMove(t *testing.T) {
	expect(t, S(10, 11, 12, 13).Move(10, 20) == S(20, 31, 22, 33))
}

func TestSegmentRect(t *testing.T) {
	expect(t, S(12, 13, 11, 12).Rect() == R(11, 12, 12, 13))
}
